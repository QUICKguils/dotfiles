#                __
#    ____  _____/ /_  __________
#   /_  / / ___/ __ \/ ___/ ___/
#  _ / /_(__  ) / / / /  / /__
# (_)___/____/_/ /_/_/   \___/
#
# Reference: http://zsh.sourceforge.net/Doc/Release/zsh_toc.html

# History setup  {{{1
# -------------

setopt histignorealldups sharehistory
# Save the 5000 last commands in .zsh_history
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=$ZDOTDIR/.zsh_history

# Colorization  {{{1
# ------------

# Tools like ls, grep, tree and fd use the LS_COLORS environment variable to
# colorize their outputs. The ~/.dir_colors file defines LS_COLORS. The
# following command does nothing but loading LS_COLORS under the directives
# contained in ~/.dir_colors.
test -r ~/.dir_colors && eval $(dircolors ~/.dir_colors)
alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# Colors for GCC
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Autocompletion  {{{1
# --------------

zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'

autoload -Uz compinit && compinit

# Automatic file change (implicit "cd")
setopt autocd

# Command prompt customization  {{{1
# ----------------------------

# Git information
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%b'
zstyle ':vcs_info:*' enable git

# Command promt appearance
symbol="▶"
PROMPT='%(!.%F{magenta}#. )%(?.%F{green}.%F{red})$symbol%f '
RPROMPT='%F{8}$vcs_info_msg_0_ [%~]'

# Keybindings/aliases  {{{1
# -------------------

# Vim-like keybindings
bindkey -v

# Aliases
alias md='mkdir -p'
alias v='nvim'
alias la='ls -A'
alias lah='ls -lAh'
alias z='zathura'
alias g='git'
alias x='exit'
alias t='tmux'
alias o='xdg-open'
alias b='bat --style=rule,changes,numbers,snip'
alias fl='figlet -t -f slant'
alias jl='julia --banner=no'
alias mlj='matlab -nodesktop -nosplash'
alias ml='matlab -nojvm'
alias py='python'

# Path shortcuts
ing="$HOME/Documents/Ecole/Bloc_3/"
hdd="/run/media/guil/Data/"

# reading tools  {{{1
# -------------

# Use neovim as default editor
export EDITOR='nvim'
export VISUAL='nvim'

# Document reader (pdf, ps, eps, ...)
export READER='zathura'

# Default pager and manual pager
export PAGER="cat"
export MANPAGER="nvim +Man!"

# Bat configuration (a cat clone with wings)
# Cf. https://github.com/sharkdp/bat
export BAT_THEME="Nord"
#export BAT_THEME="OneHalfDark"
export BAT_STYLE="auto"

# searching tools  {{{1
# ---------------

# Fzf loading. Repo located at ~/.dotfiles/neovim/plugin/fzf
if [[ ! "$PATH" == */home/guil/.dotfiles/neovim/plugin/fzf/bin* ]]; then
	export PATH="${PATH:+${PATH}:}/home/guil/.dotfiles/neovim/plugin/fzf/bin"
fi
# Auto-completion
[[ $- == *i* ]] && source "/home/guil/.dotfiles/neovim/plugin/fzf/shell/completion.zsh" 2> /dev/null
# Key bindings
source "/home/guil/.dotfiles/neovim/plugin/fzf/shell/key-bindings.zsh"

# Non-piped fzf: use fd to feed fzf instead of find.
# Cf. https://github.com/sharkdp/fd
export FZF_DEFAULT_COMMAND="fd -H"
# fzf customization (see man page)
export FZF_DEFAULT_OPTS="\
-m --height=60% --reverse --bind=ctrl-p:toggle-preview \
--color=\
bg:#2e3440,\
bg+:#3b4252,\
fg:#616e88,\
fg+:#d8dee9:bold,\
hl:#a3be8c,\
hl+:#a3be8c:bold,\
border:#b48ead,\
pointer:#bf616a:bold,\
marker:#d08770,\
prompt:#88c0d0,\
spinner:#ebcb8b,\
info:#ebcb8b"
# --color=\
# bg:#282c34,\
# bg+:#2c323c,\
# fg:#5c6370,\
# fg+:#abb2bf:bold,\
# hl:#98c379,\
# hl+:#98c379:bold,\
# border:#c678dd,\
# pointer:#e06c75:bold,\
# marker:#be5046,\
# prompt:#61afef,\
# spinner:#e5c07b,\
# info:#e5c07b"

# fzf file search, with preview using bat.
export FZF_CTRL_T_COMMAND="fd -Ht f"
export FZF_CTRL_T_OPTS="\
--preview='bat --color=always --style=''changes'' -r :$LINES {}' \
--preview-window=border-sharp"

# fzf directory search, with preview using tree.
export FZF_ALT_C_COMMAND="fd -Ht d"
export FZF_ALT_C_OPTS="\
--preview='tree -C {} | head -n $LINES' \
--preview-window=border-sharp"

# Explore command history with fzf
export FZF_CTRL_R_OPTS="--reverse"

# fzf trigger sequence (default:**)
#export FZF_COMPLETION_TRIGGER="**"
#export FZF_COMPLETION_OPTS=""

# Ajouts au PATH  {{{1
# --------------

# Java (from Oracle, not OpenJDK)
export PATH="$PATH:/usr/local/java/jdk-16.0.1/bin"
# Julia
export PATH="$PATH:/usr/local/julia/bin"
# Matlab
export PATH="$PATH:/usr/local/MATLAB/R2018b/bin"
# Latex distribution (TexLive 2021)
export PATH="$PATH:/run/media/guil/Data/texlive/2021/bin/x86_64-linux"
export MANPATH="$MANPATH:/run/media/guil/Data/texlive/2021/texmf-dist/doc/man"
export INFOPATH="$INFOPATH:/run/media/guil/Data/texlive/2021/texmf-dist/doc/info"
# Go environment setup
export GOROOT="/usr/local/go"
export PATH="$PATH:$GOROOT/bin"
export GOPATH="$HOME/.golib"
export PATH="$PATH:$GOPATH/bin"
# Cargo (rust)
. "$HOME/.cargo/env"
# Miniconda package manager
__conda_setup="$('/home/guil/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
	eval "$__conda_setup"
else
	if [ -f "/home/guil/miniconda3/etc/profile.d/conda.sh" ]; then
		. "/home/guil/miniconda3/etc/profile.d/conda.sh"
	else
		export PATH="/home/guil/miniconda3/bin:$PATH"
	fi
fi
unset __conda_setup
# Removing the "(base)" indication appearing in the command prompt:
# check this file: ~/miniconda3/etc/conda/activate.d/remove-base.sh

# Plugins  {{{1
# -------

# Additional completions
fpath=($ZDOTDIR/plugins/zsh-completions/src $fpath)
# Syntax highlighting for the shell commands
source $ZDOTDIR/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Backward search by substrings in the command history
source $ZDOTDIR/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey "^K" history-substring-search-up
bindkey "^[[A" history-substring-search-up
bindkey "^J" history-substring-search-down
bindkey "^[[B" history-substring-search-down
